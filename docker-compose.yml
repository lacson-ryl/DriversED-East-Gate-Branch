services:
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    env_file:
      - .env
    networks:
      - app-net

  redis:
    image: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - .env
    networks:
      - app-net

  nodeapp:
    build: .
    ports:
      - "${port}:${port}"
    depends_on:
      - redis
      - mysql
    env_file:
      - .env.production
    volumes:
      - .:/app
      - app-node-modules:/app/node_modules
    working_dir: /app
    command: npm run dev
    stop_grace_period: 10s
    networks:
      - app-net

  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs
      - .:/app
    depends_on:
      - nodeapp
    networks:
      - app-net

networks:
  app-net:
    driver: bridge

volumes:
  redis-data:
  mysql-data:
  app-node-modules:
