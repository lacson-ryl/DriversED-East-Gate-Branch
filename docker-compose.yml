version: "3.9" # upgraded to support depends_on.condition

services:

  tailwind-builder:
    build:
      context: .
      dockerfile: Dockerfile.tailwind
    volumes:
      - ./shared:/app
    command: echo "Tailwind CSS built"
    healthcheck:
      test: ["CMD", "test", "-f", "/app/f-css/output.css"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - app-net

  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-net

  redis:
    image: redis
    ports:
      - "6379:6379"
    env_file:
      - .env.production
    restart: unless-stopped
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-net

  nodeapp:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    restart: unless-stopped
    depends_on:
      tailwind-builder:
        condition: service_completed_successfully
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./accounts-site:/app
      - ./shared:/app/shared
      - nodeapp-node-modules:/app/node_modules
    working_dir: /app
    command: npm run start
    stop_grace_period: 10s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health-check-docker"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - app-net

  public-site:
    build:
      context: .
      dockerfile: Dockerfile.public-site
    ports:
      - "8001:8001"
    env_file:
      - .env.production
    restart: unless-stopped
    depends_on:
      tailwind-builder:
        condition: service_completed_successfully
      mysql:
        condition: service_healthy
    volumes:
      - ./public-site:/app
      - ./shared:/app/shared
      - public-node-modules:/app/node_modules
    working_dir: /app
    command: npm run start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health-check-docker"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    stop_grace_period: 10s
    networks:
      - app-net

  webhook:
    build:
      context: .
      dockerfile: Dockerfile.webhook
    ports:
      - "9000:9000"
    env_file:
      - .env.production
    restart: unless-stopped
    command: npm run webhook
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health-check-docker"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - app-net

  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    env_file:
      - .env.production
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      nodeapp:
        condition: service_healthy
      webhook:
        condition: service_healthy
      public-site:
        condition: service_healthy
    networks:
      - app-net

networks:
  app-net:
    driver: bridge

volumes:
  redis-data:
  mysql-data:
  nodeapp-node-modules:
  public-node-modules:
