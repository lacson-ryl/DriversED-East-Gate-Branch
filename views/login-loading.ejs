<!DOCTYPE html>
<html lang="en" class="bg-gray-100 text-gray-900 font-sans">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Establishing Secure Session</title>
    <link href="/f-css/output.css" rel="stylesheet" />
    <script type="module">
        import Dexie from "https://cdn.jsdelivr.net/npm/dexie@3.2.4/dist/dexie.mjs";
        window.Dexie = Dexie;
    </script>
</head>

<body class="h-screen flex flex-col items-center justify-center px-6">
    <!-- Lock animation -->
    <div class="relative w-24 h-24 flex items-center justify-center mb-6">
        <div class="w-20 h-20 border-8 border-gray-300 border-t-blue-500 rounded-full animate-spin-slow"></div>
        <svg class="absolute w-10 h-10 text-blue-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
            stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"
                d="M12 15v2m4-2a4 4 0 00-8 0v2a4 4 0 008 0v-2zM12 11a4 4 0 014 4v2a4 4 0 01-8 0v-2a4 4 0 014-4z" />
        </svg>
    </div>

    <h1 id="main-msg" class="text-2xl font-semibold mb-2">Hello, <span id="role-label" class="capitalize">user</span>!
    </h1>
    <p id="extra-msg" class="text-sm text-gray-600 text-center max-w-xs">
        We're establishing your encrypted session. This may take a few seconds.
    </p>

    <!-- Hidden role input (populated by server) -->
    <input type="hidden" id="role" value="<%= role %>" />

    <script type="module">
        import { KeyManager } from "../utils/f-keyManager.js";

        const role = document.getElementById("role").value;
        const roleLabel = document.getElementById("role-label");
        const mainMsg = document.getElementById("main-msg");
        const extraMsg = document.getElementById("extra-msg");

        if (role === "admin") {
            roleLabel.textContent = "admin";
        } else if (role === "instructor") {
            roleLabel.textContent = "instructor";
        } else if (role === "user") {
            roleLabel.textContent = "user";
        } else {
            roleLabel.textContent = "guest";
        }

        let initialized = false;
        let initSuccess = false;

        // Start the 5-second minimum display timer
        const initialTimer = setTimeout(() => {
            if (initialized && initSuccess) {
                // If already initialized successfully, show secure message for 3s then redirect
                mainMsg.textContent = "🔐 Secure channel established";
                extraMsg.textContent = "Redirecting to your dashboard...";
                setTimeout(() => {
                    if (role === "admin" || role === "instructor") {
                        window.location.href = "/admin-dashboard";
                    } else if (role === "user") {
                        window.location.href = "/user-dashboard";
                    } else {
                        window.location.href = "/user-login";
                    }
                }, 3000);
            }
            // If not initialized yet, do nothing. The init promise will handle the rest.
        }, 5000);

        (async () => {
            try {
                const initialize = await KeyManager.init();
                initialized = true;
                initSuccess = true;
                // If the 5s timer already finished, proceed immediately
                if (initialTimer._called || initialTimer.hasFired) {
                    mainMsg.textContent = "🔐 Secure channel established";
                    extraMsg.textContent = "Redirecting to your dashboard...";
                    setTimeout(() => {
                        if (role === "admin" || role === "instructor") {
                            window.location.href = "/admin-dashboard";
                        } else if (role === "user") {
                            window.location.href = "/user-dashboard";
                        } else {
                            window.location.href = "/user-login";
                        }
                    }, 3000);
                }
                // Otherwise, wait for the 5s timer to finish (handled above)
            } catch (err) {
                initialized = true;
                initSuccess = false;
                console.error("[KeyManager] ❌ initialize failed:", err, err && err.stack);
                mainMsg.textContent = "🔐 Securing channel failed";
                extraMsg.textContent = "Redirecting to your login page...";
                alert("Something went wrong during secure setup.");
                setTimeout(() => {
                    window.location.href = "/logout";
                }, 5000);
            }
        })();
    </script>

    <!-- Tailwind spin-slow animation -->
    <style>
        .animate-spin-slow {
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }
    </style>
</body>

</html>